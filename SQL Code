create database pizzas_hut2;

CREATE TABLE order_details1(
order_details_id int not null,
order_id  int not null,
pizza_id  text not null ,
quantity int not null,
PRIMARY KEY(order_details_id));
select * from order_details1;


create table orders1 (
order_id int not null,
order_date date  not null,
order_time time not null,
PRIMARY KEY (order_id));

select * from orders1;


load data infile  'order_details.csv' into table order_details1;

# load data infile  'orders.csv' into table orders1;

LOAD DATA INFILE 'orders.csv'
INTO TABLE orders1
FIELDS TERMINATED BY ',' 
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(order_id, order_date, order_time);

select * from orders1;

# Basic
-- Retrieve the total number of orders placed.
SELECT COUNT(order_id) AS total_number_of_orders
FROM orders1;

# Calculate the total revenue generated from pizza sales.
select round(sum(order_details1.quantity * pizzas.price),0) as total_sales
from order_details1 join pizzas
on pizzas.pizza_id = order_details1.pizza_id;

# Identify the highest-priced pizza.
select  pizza_types.name, pizzas.price from pizzas join pizza_types
on pizzas.pizza_type_id = pizza_types.pizza_type_id
order by pizzas.price desc limit 1;

# Identify the most common pizza size ordered.
select pizzas.size, count(order_details1.order_details_id) as order_count
from pizzas join order_details1 on pizzas.pizza_id = order_details1.pizza_id
group by pizzas.size order by order_count desc limit 3 ;

# List the top 5 most ordered pizza types 
# along with their quantities.

select pizza_types.name, sum(order_details1.quantity) as quantity
from pizza_types 
join 
pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
join
order_details1 on order_details1.pizza_id = pizzas.pizza_id
group by pizza_types.name 
order by quantity desc limit 5;

# Intermediate:
# Join the necessary tables to find the total quantity of each pizza category ordered.
select pizza_types.category, sum(order_details1.quantity) as quantity
from pizza_types join 
pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
join
order_details1 on order_details1.pizza_id = pizzas.pizza_id
group by pizza_types.category
order by quantity desc;

# Determine the distribution of orders by hour of the day.
select hour(orders1.order_time) as Hours , count(orders1.order_id) as Orders
from orders1
group by hour(order_time) ; 

# Join relevant tables to find the category-wise distribution of pizzas.
select pizza_types.category, pizza_types.name, pizzas.size, pizzas.price from pizza_types 
join pizzas 
on pizza_types.pizza_type_id = pizzas.pizza_type_id;
select category, count(name) as Distribution  from pizza_types
group by category;

# Group the orders by date and calculate the average number of pizzas ordered per day.
select round(avg(quantity),1) as Avg_pizza_ordered_per_day from
(select orders1.order_date, sum(order_details1.quantity) as quantity from orders1 join 
order_details1 
on orders1.order_id = order_details1.order_id
group by orders1.order_date) as order_quantity; 

# Determine the top 3 most ordered pizza types based on revenue.

# select pizza_types.name, sum(order_details1.quantity * pizzas.price) as revenue from 
# pizza_types join pizzas on pizzas.pizza_type_id = pizzas.pizza_type_id
# join order_details1
# group by pizza_types.name order by revenue desc limit 3;

SELECT 
    pizza_types.name, 
    ROUND(SUM(order_details1.quantity * pizzas.price),0) AS revenue 
FROM 
    pizza_types 
JOIN 
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN 
    order_details1 ON order_details1.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.name
ORDER BY
	revenue 
DESC LIMIT
        3;
    
# Advanced:
# Calculate the percentage contribution of each pizza type to total revenue.
# select pizza_types.category, sum(order_details1.quantity * pizzas.price) / 
# (select round(sum(order_details1.quantity * pizzas.price),0) as total_sales
# from order_details1 join pizzas
# on pizzas.pizza_id = order_details1.pizza_id) * 100 as revenue

# from pizza_types join pizzas on pizzas.pizza_type_id = pizza_types.pizza_type_id
# join order_details1 on order_details1.pizza_id = pizzas.pizza_id
# group by category order by revenue desc limit 3;


SELECT 
    pizza_types.category, 
    CONCAT(ROUND(SUM(order_details1.quantity * pizzas.price) / 
    (SELECT SUM(order_details1.quantity * pizzas.price) 
     FROM order_details1 
     JOIN pizzas ON pizzas.pizza_id = order_details1.pizza_id) * 100, 2), '%') AS revenue_percentage
FROM pizza_types 
JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN order_details1 ON order_details1.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category 
ORDER BY revenue_percentage DESC 
LIMIT 3;

 
# Analyze the cumulative revenue generated over time.
select order_date, sum(revenue) over(order by order_date) as Cumulative_Revenue
from
(select orders1.order_date, round(sum(order_details1.quantity * pizzas.price), 0) as revenue
from order_details1 join pizzas on pizzas.pizza_id = order_details1.pizza_id
join orders1 on order_details1.order_id = orders1.order_id
group by orders1.order_date) as sales ;

# Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select category, name, revenue,
rank() over(partition by category order by revenue desc)  as rn
from
(select pizza_types.category, pizza_types.name, sum((order_details1.quantity) * pizzas.price) as revenue
from pizza_types 
join pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details1 on pizzas.pizza_id = order_details1.pizza_id
group by pizza_types.category, pizza_types.name) as A



 
